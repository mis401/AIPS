generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  email               String      @unique
  hashedPassword      String
  role                Role        @default(USER)
  firstName           String
  lastName            String
  comments            Comment[]
  createdCommunities  Community[] @relation("createdUser")
  documents           Document[]  @relation("createdBy")
  messages            Message[]
  managingCommunities Community[] @relation("managers")
  communities         Community[] @relation("memberOf")
  subscribedTo        Document[]  @relation("subscriptions")
  status              String      @default("offline") 
}

model Community {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  createdAt     DateTime  @default(now())
  createdUserId Int
  calendarId    Int       @unique
  code          String    @unique
  calendar      Calendar  @relation("calendarOf", fields: [calendarId], references: [id])
  createdUser   User      @relation("createdUser", fields: [createdUserId], references: [id])
  messages      Message[]
  managers      User[]    @relation("managers")
  members       User[]    @relation("memberOf")
}

model Calendar {
  id        Int        @id @default(autoincrement())
  name      String
  community Community? @relation("calendarOf")
  documents Document[]
  events    Event[]
}

model Document {
  id              Int            @id @default(autoincrement())
  name            String
  path            String
  day             DateTime
  type            DocumentType   @default(DOCUMENT)
  calendarId      Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdById     Int
  comments        Comment[]
  calendar        Calendar       @relation(fields: [calendarId], references: [id])
  createdBy       User           @relation("createdBy", fields: [createdById], references: [id])
  notifications   Notification[]
  subscribedUsers User[]         @relation("subscriptions")
}

model Event {
  id         Int        @id @default(autoincrement())
  name       String
  start      DateTime
  end        DateTime
  color      EventTheme @default(BLUE)
  calendarId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  calendar   Calendar   @relation(fields: [calendarId], references: [id])
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  documentId  Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  document    Document @relation(fields: [documentId], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  text       String
  createdAt  DateTime @default(now())
  documentId Int
  document   Document @relation(fields: [documentId], references: [id])
}

model Message {
  id          Int       @id @default(autoincrement())
  text        String
  createdAt   DateTime  @default(now())
  senderId    Int
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  sender      User      @relation(fields: [senderId], references: [id])
}

enum Role {
  USER
  MANAGER
}

enum DocumentType {
  WHITEBOARD
  DOCUMENT
  TODO
}

enum EventTheme {
  RED
  BLUE
  GREEN
  YELLOW
  PURPLE
  ORANGE
  PINK
  GREY
  BLACK
  WHITE
}
